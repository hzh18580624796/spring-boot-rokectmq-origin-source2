javap -v TTTT
警告: 二进制文件TTTT包含com.hzh.springbootsingleapplication.Test.netty.timer.TTTT
Classfile /Users/hezhihong/ideaWork/springboot-single-application/src/main/java/com/hzh/springbootsingleapplication/Test/netty/timer/TTTT.class
  Last modified 2021-9-22; size 768 bytes
  MD5 checksum 36b5723bf395dad4f946ce4270b3e7f0
  Compiled from "TTTT.java"
public class com.hzh.springbootsingleapplication.Test.netty.timer.TTTT
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Methodref          #10.#27        // java/lang/Object."<init>":()V
   #2 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;
   #3 = String             #17            // tt
   #4 = Methodref          #30.#31        // java/io/PrintStream.println:(Ljava/lang/String;)V
   #5 = Class              #32            // java/lang/String
   #6 = String             #11            // name
   #7 = Methodref          #5.#33         // java/lang/String."<init>":(Ljava/lang/String;)V
   #8 = Fieldref           #9.#34         // com/hzh/springbootsingleapplication/Test/netty/timer/TTTT.name:Ljava/lang/String;
   #9 = Class              #35            // com/hzh/springbootsingleapplication/Test/netty/timer/TTTT
  #10 = Class              #36            // java/lang/Object
  #11 = Utf8               name
  #12 = Utf8               Ljava/lang/String;
  #13 = Utf8               <init>
  #14 = Utf8               ()V
  #15 = Utf8               Code
  #16 = Utf8               LineNumberTable
  #17 = Utf8               tt
  #18 = Utf8               StackMapTable
  #19 = Class              #35            // com/hzh/springbootsingleapplication/Test/netty/timer/TTTT
  #20 = Class              #36            // java/lang/Object
  #21 = Class              #37            // java/lang/Throwable
  #22 = Utf8               tt2
  #23 = Utf8               main
  #24 = Utf8               ([Ljava/lang/String;)V
  #25 = Utf8               SourceFile
  #26 = Utf8               TTTT.java
  #27 = NameAndType        #13:#14        // "<init>":()V
  #28 = Class              #38            // java/lang/System
  #29 = NameAndType        #39:#40        // out:Ljava/io/PrintStream;
  #30 = Class              #41            // java/io/PrintStream
  #31 = NameAndType        #42:#43        // println:(Ljava/lang/String;)V
  #32 = Utf8               java/lang/String
  #33 = NameAndType        #13:#43        // "<init>":(Ljava/lang/String;)V
  #34 = NameAndType        #11:#12        // name:Ljava/lang/String;
  #35 = Utf8               com/hzh/springbootsingleapplication/Test/netty/timer/TTTT
  #36 = Utf8               java/lang/Object
  #37 = Utf8               java/lang/Throwable
  #38 = Utf8               java/lang/System
  #39 = Utf8               out
  #40 = Utf8               Ljava/io/PrintStream;
  #41 = Utf8               java/io/PrintStream
  #42 = Utf8               println
  #43 = Utf8               (Ljava/lang/String;)V
{
  public com.hzh.springbootsingleapplication.Test.netty.timer.TTTT();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 3: 0

  public void tt();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=4, locals=3, args_size=1
         0: aload_0
         1: dup
         2: astore_1
         3: monitorenter
         4: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
         7: ldc           #3                  // String tt
         9: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        12: aload_0
        13: new           #5                  // class java/lang/String
        16: dup
        17: ldc           #6                  // String name
        19: invokespecial #7                  // Method java/lang/String."<init>":(Ljava/lang/String;)V
        22: putfield      #8                  // Field name:Ljava/lang/String;
        25: aload_1
        26: monitorexit             //程序成正常退出
        27: goto          35
        30: astore_2
        31: aload_1
        32: monitorexit             //程序异常退出，自动释放锁，这也是和lock的区别
        33: aload_2
        34: athrow
        35: return
      Exception table:
         from    to  target type
             4    27    30   any
            30    33    30   any
      LineNumberTable:
        line 8: 0
        line 9: 4
        line 10: 12
        line 11: 25
        line 12: 35
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 30
          locals = [ class com/hzh/springbootsingleapplication/Test/netty/timer/TTTT, class java/lang/Object ]
          stack = [ class java/lang/Throwable ]
        frame_type = 250 /* chop */
          offset_delta = 4

  public synchronized void tt2();
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_SYNCHRONIZED
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: new           #5                  // class java/lang/String
         4: dup
         5: ldc           #6                  // String name
         7: invokespecial #7                  // Method java/lang/String."<init>":(Ljava/lang/String;)V
        10: putfield      #8                  // Field name:Ljava/lang/String;
        13: return
      LineNumberTable:
        line 15: 0
        line 17: 13

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=0, locals=1, args_size=1
         0: return
      LineNumberTable:
        line 21: 0
}
SourceFile: "TTTT.java"
